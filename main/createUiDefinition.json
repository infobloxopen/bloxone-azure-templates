{
  "$schema": "https://schema.management.azure.com/schemas/0.1.2-preview/CreateUIDefinition.MultiVm.json#",
  "handler": "Microsoft.Azure.CreateUIDef",
  "version": "0.1.2-preview",
  "parameters": {
    "config": {
      "isWizard": false,
      "basics": {
        "resourceGroup": {
          "constraints": {
            "validations": [
              {
                "isValid": "[not(contains(resourceGroup().name, 'test'))]",
                "message": "Resource Group name can not contain test"
              }
            ]
          },
          "allowExisting": true
        },
        "location": {
          "label": "Region",
          "toolTip": "The Azure region into which resources should be deployed.",
          "resourceTypes": [
            "Microsoft.Network/networkInterfaces",
            "Microsoft.Network/networkSecurityGroups",
            "Microsoft.Network/publicIPAddresses",
            "Microsoft.Storage/storageAccounts",
            "Microsoft.Compute/virtualMachines"
          ],
          "visible": true
        }
      }
    },
    "basics": [
      {
        "name": "availabilityOptions",
        "type": "Microsoft.Common.DropDown",
        "label": "Availability options",
        "toolTip": "Select the availability option.",
        "constraints": {
          "allowedValues": [
            {
              "label": "No infrastructure redundancy required",
              "value": "noInfrastructure"
            },
            {
              "label": "Availability zones",
              "value": "availabilityZones"
            }
          ]
        },
        "visible": "[or(equals(location(), 'eastus'), equals(location(), 'australiaeast'), equals(location(), 'brazilsouth'), equals(location(), 'canadacentral'), equals(location(), 'centralindia'), equals(location(), 'centralus'), equals(location(), 'eastasia'), equals(location(), 'eastus2'), equals(location(), 'francecentral'), equals(location(), 'germanywestcentral'), equals(location(), 'israelcentral'), equals(location(), 'italynorth'), equals(location(), 'japaneast'), equals(location(), 'japanwest'), equals(location(), 'koreacentral'), equals(location(), 'mexicocentral'), equals(location(), 'newzealandnorth'), equals(location(), 'northeurope'), equals(location(), 'norwayeast'), equals(location(), 'polandcentral'), equals(location(), 'qatarcentral'), equals(location(), 'southafricanorth'), equals(location(), 'southcentralus'), equals(location(), 'southeastasia'), equals(location(), 'spaincentral'), equals(location(), 'swedencentral'), equals(location(), 'switzerlandnorth'), equals(location(), 'uaenorth'), equals(location(), 'uksouth'), equals(location(), 'westeurope'), equals(location(), 'westus2'), equals(location(), 'westus3'))]"
      },
      {
        "name": "zoneOptions",
        "type": "Microsoft.Common.OptionsGroup",
        "label": "Zone options",
        "toolTip": "Select the zone option.",
        "constraints": {
          "allowedValues": [
            {
              "label": "Self-selected zone",
              "value": "selfSelected"
            },
            {
              "label": "Azure-selected zone (Preview)",
              "value": "azureSelected"
            }
          ]
        },
        "visible": "[equals(basics('availabilityOptions'), 'availabilityZones')]"
      },
      {
        "name": "availabilityZones",
        "type": "Microsoft.Common.DropDown",
        "label": "Availability zone",
        "defaultValue": "Zone 1",
        "toolTip": "Availability zones can be selected",
        "constraints": {
          "allowedValues": [
            {
              "label": "Zone 1",
              "value": "1"
            },
            {
              "label": "Zone 2",
              "value": "2"
            },
            {
              "label": "Zone 3",
              "value": "3"
            }
          ]
        },
        "visible": "[equals(basics('zoneOptions'), 'selfSelected')]"
      },
      {
        "name": "vmName",
        "type": "Microsoft.Common.TextBox",
        "label": "Bloxone VM name",
        "defaultValue": "Bloxone",
        "toolTip": "The name of the new Bloxone vm.",
        "multiLine": false,
        "constraints": {
          "required": true,
          "regex": "^(?!\\.|\\-|[0-9])([0-9a-zA-Z.-]){1,64}[^-.]$",
          "validationMessage": "Allowed characters for the VM name: [A-Z], [a-z], [0-9], [.-].<br />The length must be between 1 and 64 characters.<br />The VM name cannot start from [0-9], [.-] or end with [.-]."
        },
        "visible": true
      },
      {
        "name": "vmSize",
        "type": "Microsoft.Compute.SizeSelector",
        "label": "VM size",
        "toolTip": "Select a VM size to support the workload that you want to run. The size that you choose then determines factors such as processing power, memory, and storage capacity. Azure offers a wide variety of sizes to support many types of uses. Azure charges an hourly price based on the VM's size and operating system.Learn more about Virtual Machine sizes",
        "recommendedSizes": [
          "Standard_F8s_v2",
          "Standard_F8s"
        ],
        "visible": "true",
        "osPlatform": "Linux"
      },
      {
        "name": "jointoken",
        "type": "Microsoft.Common.TextBox",
        "label": "Jointoken",
        "toolTip": "Enter Jointoken obtained from CSP.",
        "constraints": {
          "required": true,
          "regex": "^(?:[a-zA-Z0-9_\\-]+\\.)?[a-zA-Z0-9_\\-]{44}(?:\\.[a-zA-Z0-9_\\-]+)?$",
          "validationMessage": "Insert valid Jointoken."
        },
        "visible": "true"
      },
      {
        "name": "httpProxy",
        "type": "Microsoft.Common.TextBox",
        "label": "HTTP proxy",
        "toolTip": "Pass http proxy E.g: http://[username:passwod@]&lt;proxy_host&gt;:&lt;proxy_port&gt;",
        "constraints": {
          "required": false,
          "regex": "^http:\\/\\/(([^:]{1,128}):([^@]{1,256})@)?((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(\\[((([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))\\])|(((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9].)+[a-zA-Z]{2,63}))\\:(6553[0-5]|655[0-2][0-9]|65[0-4][0-9][0-9]|6[0-4][0-9][0-9][0-9]|[1-5][0-9][0-9][0-9][0-9]|[1-9][0-9]{0,3})$",
          "validationMessage": "Enter correct HTTP Proxy"
        },
        "visible": "true"
      }
    ],
    "steps": [
      {
        "name": "disks",
        "label": "Disks",
        "bladeTitle": "Disks",
        "subLabel": {
          "preValidation": "Configure disks",
          "postValidation": "Done"
        },
        "elements": [
          {
            "name": "InfoAdvanced",
            "type": "Microsoft.Common.InfoBox",
            "visible": "true",
            "options": {
              "icon": "Info",
              "text": "This section consists of disk related information for your virtual machine. You can specify the size and type of disks to use for your VM."
            }
          },
          {
            "name": "osDiskSize",
            "type": "Microsoft.Common.TextBox",
            "label": "OS Disk Size for VM (GiB)",
            "toolTip": "Specify the size of the Disk. The Disk size should be between 60GB and 2500GB",
            "defaultValue": "60",
            "constraints": {
              "regex": "^(6[0-9]|7[0-9]|8[0-9]|9[0-9]|1[0-9]{2}|1[1-9][0-9]{2}|2[0-4][0-9]{2}|2500)$",
              "validationMessage": "The size must be in numbers and minimum allowed size is 60GB and maximum is 2500GB"
            }
          },
          {
            "name": "osDiskType",
            "type": "Microsoft.Common.DropDown",
            "label": "OS Disk type",
            "defaultValue": "Premium SSD (Premium_LRS)",
            "constraints": {
              "allowedValues": [
                {
                  "label": "Standard HDD (Standard_LRS)",
                  "value": "Standard_LRS"
                },
                {
                  "label": "Standard SSD (StandardSSD_LRS)",
                  "value": "StandardSSD_LRS"
                },
                {
                  "label": "Premium SSD (Premium_LRS)",
                  "value": "Premium_LRS"
                }
              ]
            },
            "toolTip": "Select the type of OS disk."
          }
        ]
      },
      {
        "name": "networking",
        "label": "Networking",
        "subLabel": {
          "preValidation": "Configure networking",
          "postValidation": "Done"
        },
        "bladeTitle": "Networking",
        "elements": [
          {
            "name": "InfoAdvanced",
            "type": "Microsoft.Common.InfoBox",
            "visible": "true",
            "options": {
              "icon": "Info",
              "text": "Define network connectivity for your virtual machine by configuring network interface card (NIC) settings. You can control ports, inbound and outbound connectivity with security group rules, or place behind an existing load balancing solution."
            }
          },
          {
            "name": "virtualNetwork",
            "type": "Microsoft.Network.VirtualNetworkCombo",
            "label": {
              "virtualNetwork": "Virtual network",
              "subnets": "Subnets"
            },
            "toolTip": {
              "virtualNetwork": "Only virtual networks in the currently selected subscription and location are listed. If you choose to create a new virtual network, it will be created in the same subscription, location, and resource group as the VM."
            },
            "constraints": {
              "minAddressPrefixSize": "/29"
            },
            "options": {
              "hideExisting": false
            },
            "subnets": {
              "subnet1": {
                "label": "Subnet",
                "defaultValue": {
                  "name": "subnet1"
                },
                "constraints": {
                  "minAddressPrefixSize": "/30"
                }
              }
            },
            "visible": true
          },
          {
            "name": "publicIp",
            "type": "Microsoft.Network.PublicIpAddressCombo",
            "label": {
              "publicIpAddress": "Public IP address"
            },
            "toolTip": {
              "publicIpAddress": "Use a public IP address if you want to communicate with the virtual machine from outside the virtual network."
            },
            "options": {
              "hideNone": false,
              "hideDomainNameLabel": true,
              "hideExisting": false,
              "zone": 3
            },
            "visible": true
          },
          {
            "name": "securityGroup",
            "type": "Microsoft.Common.DropDown",
            "label": "Security group",
            "toolTip": "Select inbound ports.",
            "constraints": {
              "allowedValues": [
                {
                  "label": "Bootstrap UI (443)",
                  "value": "bootstrapUi"
                }
              ]
            },
            "visible": true
          },
          {
            "name": "enableIPForwarding",
            "type": "Microsoft.Common.CheckBox",
            "label": "Enable IP Forwarding",
            "toolTip": "Enable IP forwarding for VM.",
            "defaultValue": false
          },
          {
            "name": "info",
            "type": "Microsoft.Common.InfoBox",
            "visible": "[or(equals(basics('vmSize'), 'Standard_E2s_v3'), equals(basics('vmSize'), 'Standard_E4s_v3'), equals(basics('vmSize'), 'Standard_E8s_v3'), equals(basics('vmSize'), 'Standard_E16s_v3'), equals(basics('vmSize'), 'Standard_E32s_v3'), equals(basics('vmSize'), 'Standard_E64s_v3'), equals(basics('vmSize'), 'Standard_E2s_v4'), equals(basics('vmSize'), 'Standard_E4s_v4'), equals(basics('vmSize'), 'Standard_E8s_v4'), equals(basics('vmSize'), 'Standard_E16s_v4'), equals(basics('vmSize'), 'Standard_E32s_v4'), equals(basics('vmSize'), 'Standard_E48s_v4'), equals(basics('vmSize'), 'Standard_E64s_v4'), equals(basics('vmSize'), 'Standard_E2s_v5'), equals(basics('vmSize'), 'Standard_E4s_v5'), equals(basics('vmSize'), 'Standard_E8s_v5'), equals(basics('vmSize'), 'Standard_E16s_v5'), equals(basics('vmSize'), 'Standard_E32s_v5'), equals(basics('vmSize'), 'Standard_E48s_v5'), equals(basics('vmSize'), 'Standard_E64s_v5'), equals(basics('vmSize'), 'Standard_E2as_v4'), equals(basics('vmSize'), 'Standard_E4as_v4'), equals(basics('vmSize'), 'Standard_E8as_v4'), equals(basics('vmSize'), 'Standard_E16as_v4'), equals(basics('vmSize'), 'Standard_E32as_v4'), equals(basics('vmSize'), 'Standard_E48as_v4'), equals(basics('vmSize'), 'Standard_E64as_v4'), equals(basics('vmSize'), 'Standard_E2as_v5'), equals(basics('vmSize'), 'Standard_E4as_v5'), equals(basics('vmSize'), 'Standard_E8as_v5'), equals(basics('vmSize'), 'Standard_E16as_v5'), equals(basics('vmSize'), 'Standard_E32as_v5'), equals(basics('vmSize'), 'Standard_E48as_v5'), equals(basics('vmSize'), 'Standard_E64as_v5'), equals(basics('vmSize'), 'Standard_D2s_v3'), equals(basics('vmSize'), 'Standard_D4s_v3'), equals(basics('vmSize'), 'Standard_D8s_v3'), equals(basics('vmSize'), 'Standard_D16s_v3'), equals(basics('vmSize'), 'Standard_D32s_v3'), equals(basics('vmSize'), 'Standard_D64s_v3'), equals(basics('vmSize'), 'Standard_D2s_v4'), equals(basics('vmSize'), 'Standard_D4s_v4'), equals(basics('vmSize'), 'Standard_D8s_v4'), equals(basics('vmSize'), 'Standard_D16s_v4'), equals(basics('vmSize'), 'Standard_D32s_v4'), equals(basics('vmSize'), 'Standard_D48s_v4'), equals(basics('vmSize'), 'Standard_D64s_v4'), equals(basics('vmSize'), 'Standard_D2s_v5'), equals(basics('vmSize'), 'Standard_D4s_v5'), equals(basics('vmSize'), 'Standard_D8s_v5'), equals(basics('vmSize'), 'Standard_D16s_v5'), equals(basics('vmSize'), 'Standard_D32s_v5'), equals(basics('vmSize'), 'Standard_D48s_v5'), equals(basics('vmSize'), 'Standard_D64s_v5'), equals(basics('vmSize'), 'Standard_D2as_v4'), equals(basics('vmSize'), 'Standard_D4as_v4'), equals(basics('vmSize'), 'Standard_D8as_v4'), equals(basics('vmSize'), 'Standard_D16as_v4'), equals(basics('vmSize'), 'Standard_D32as_v4'), equals(basics('vmSize'), 'Standard_D48as_v4'), equals(basics('vmSize'), 'Standard_D64as_v4'), equals(basics('vmSize'), 'Standard_D2as_v5'), equals(basics('vmSize'), 'Standard_D4as_v5'), equals(basics('vmSize'), 'Standard_D8as_v5'), equals(basics('vmSize'), 'Standard_D16as_v5'), equals(basics('vmSize'), 'Standard_D32as_v5'), equals(basics('vmSize'), 'Standard_D48as_v5'), equals(basics('vmSize'), 'Standard_D64as_v5'), equals(basics('vmSize'), 'Standard_F2s_v2'), equals(basics('vmSize'), 'Standard_F4s_v2'), equals(basics('vmSize'), 'Standard_F8s_v2'), equals(basics('vmSize'), 'Standard_F16s_v2'), equals(basics('vmSize'), 'Standard_F32s_v2'), equals(basics('vmSize'), 'Standard_F64s_v2'), equals(basics('vmSize'), 'Standard_F72s_v2'), equals(basics('vmSize'), 'Standard_F2s_v3'), equals(basics('vmSize'), 'Standard_F4s_v3'), equals(basics('vmSize'), 'Standard_F8s_v3'), equals(basics('vmSize'), 'Standard_F16s_v3'), equals(basics('vmSize'), 'Standard_F32s_v3'), equals(basics('vmSize'), 'Standard_F64s_v3'), equals(basics('vmSize'), 'Standard_F72s_v3'), equals(basics('vmSize'), 'Standard_L8s_v2'), equals(basics('vmSize'), 'Standard_L16s_v2'), equals(basics('vmSize'), 'Standard_L32s_v2'), equals(basics('vmSize'), 'Standard_L48s_v2'), equals(basics('vmSize'), 'Standard_L64s_v2'), equals(basics('vmSize'), 'Standard_L80s_v2'), equals(basics('vmSize'), 'Standard_L8as_v3'), equals(basics('vmSize'), 'Standard_L16as_v3'), equals(basics('vmSize'), 'Standard_L32as_v3'), equals(basics('vmSize'), 'Standard_L48as_v3'), equals(basics('vmSize'), 'Standard_L64as_v3'), equals(basics('vmSize'), 'Standard_L80as_v3'), equals(basics('vmSize'), 'Standard_NC4as_T4_v3'), equals(basics('vmSize'), 'Standard_NC8as_T4_v3'), equals(basics('vmSize'), 'Standard_NC16as_T4_v3'), equals(basics('vmSize'), 'Standard_NC64as_T4_v3'), equals(basics('vmSize'), 'Standard_ND6s_v2'), equals(basics('vmSize'), 'Standard_ND12s_v2'), equals(basics('vmSize'), 'Standard_ND24s_v2'), equals(basics('vmSize'), 'Standard_ND40s_v2'), equals(basics('vmSize'), 'Standard_HB120rs_v2'), equals(basics('vmSize'), 'Standard_HC44rs'))]",
            "options": {
              "icon": "Info",
              "text": "Accelerated networking is a feature that enables single root I/O virtualization (SR-IOV) for virtual machines. This can improve network performance and reduce CPU utilization."
            }
          },
          {
            "name": "enableAcceleratedNetworking",
            "type": "Microsoft.Common.CheckBox",
            "label": "Enable accelerated networking",
            "toolTip": "Enables low latency and high throughput on the network interface.",
            "defaultValue": false,
            "visible": "[or(equals(basics('vmSize'), 'Standard_E2s_v3'), equals(basics('vmSize'), 'Standard_E4s_v3'), equals(basics('vmSize'), 'Standard_E8s_v3'), equals(basics('vmSize'), 'Standard_E16s_v3'), equals(basics('vmSize'), 'Standard_E32s_v3'), equals(basics('vmSize'), 'Standard_E64s_v3'), equals(basics('vmSize'), 'Standard_E2s_v4'), equals(basics('vmSize'), 'Standard_E4s_v4'), equals(basics('vmSize'), 'Standard_E8s_v4'), equals(basics('vmSize'), 'Standard_E16s_v4'), equals(basics('vmSize'), 'Standard_E32s_v4'), equals(basics('vmSize'), 'Standard_E48s_v4'), equals(basics('vmSize'), 'Standard_E64s_v4'), equals(basics('vmSize'), 'Standard_E2s_v5'), equals(basics('vmSize'), 'Standard_E4s_v5'), equals(basics('vmSize'), 'Standard_E8s_v5'), equals(basics('vmSize'), 'Standard_E16s_v5'), equals(basics('vmSize'), 'Standard_E32s_v5'), equals(basics('vmSize'), 'Standard_E48s_v5'), equals(basics('vmSize'), 'Standard_E64s_v5'), equals(basics('vmSize'), 'Standard_E2as_v4'), equals(basics('vmSize'), 'Standard_E4as_v4'), equals(basics('vmSize'), 'Standard_E8as_v4'), equals(basics('vmSize'), 'Standard_E16as_v4'), equals(basics('vmSize'), 'Standard_E32as_v4'), equals(basics('vmSize'), 'Standard_E48as_v4'), equals(basics('vmSize'), 'Standard_E64as_v4'), equals(basics('vmSize'), 'Standard_E2as_v5'), equals(basics('vmSize'), 'Standard_E4as_v5'), equals(basics('vmSize'), 'Standard_E8as_v5'), equals(basics('vmSize'), 'Standard_E16as_v5'), equals(basics('vmSize'), 'Standard_E32as_v5'), equals(basics('vmSize'), 'Standard_E48as_v5'), equals(basics('vmSize'), 'Standard_E64as_v5'), equals(basics('vmSize'), 'Standard_D2s_v3'), equals(basics('vmSize'), 'Standard_D4s_v3'), equals(basics('vmSize'), 'Standard_D8s_v3'), equals(basics('vmSize'), 'Standard_D16s_v3'), equals(basics('vmSize'), 'Standard_D32s_v3'), equals(basics('vmSize'), 'Standard_D64s_v3'), equals(basics('vmSize'), 'Standard_D2s_v4'), equals(basics('vmSize'), 'Standard_D4s_v4'), equals(basics('vmSize'), 'Standard_D8s_v4'), equals(basics('vmSize'), 'Standard_D16s_v4'), equals(basics('vmSize'), 'Standard_D32s_v4'), equals(basics('vmSize'), 'Standard_D48s_v4'), equals(basics('vmSize'), 'Standard_D64s_v4'), equals(basics('vmSize'), 'Standard_D2s_v5'), equals(basics('vmSize'), 'Standard_D4s_v5'), equals(basics('vmSize'), 'Standard_D8s_v5'), equals(basics('vmSize'), 'Standard_D16s_v5'), equals(basics('vmSize'), 'Standard_D32s_v5'), equals(basics('vmSize'), 'Standard_D48s_v5'), equals(basics('vmSize'), 'Standard_D64s_v5'), equals(basics('vmSize'), 'Standard_D2as_v4'), equals(basics('vmSize'), 'Standard_D4as_v4'), equals(basics('vmSize'), 'Standard_D8as_v4'), equals(basics('vmSize'), 'Standard_D16as_v4'), equals(basics('vmSize'), 'Standard_D32as_v4'), equals(basics('vmSize'), 'Standard_D48as_v4'), equals(basics('vmSize'), 'Standard_D64as_v4'), equals(basics('vmSize'), 'Standard_D2as_v5'), equals(basics('vmSize'), 'Standard_D4as_v5'), equals(basics('vmSize'), 'Standard_D8as_v5'), equals(basics('vmSize'), 'Standard_D16as_v5'), equals(basics('vmSize'), 'Standard_D32as_v5'), equals(basics('vmSize'), 'Standard_D48as_v5'), equals(basics('vmSize'), 'Standard_D64as_v5'), equals(basics('vmSize'), 'Standard_F2s_v2'), equals(basics('vmSize'), 'Standard_F4s_v2'), equals(basics('vmSize'), 'Standard_F8s_v2'), equals(basics('vmSize'), 'Standard_F16s_v2'), equals(basics('vmSize'), 'Standard_F32s_v2'), equals(basics('vmSize'), 'Standard_F64s_v2'), equals(basics('vmSize'), 'Standard_F72s_v2'), equals(basics('vmSize'), 'Standard_F2s_v3'), equals(basics('vmSize'), 'Standard_F4s_v3'), equals(basics('vmSize'), 'Standard_F8s_v3'), equals(basics('vmSize'), 'Standard_F16s_v3'), equals(basics('vmSize'), 'Standard_F32s_v3'), equals(basics('vmSize'), 'Standard_F64s_v3'), equals(basics('vmSize'), 'Standard_F72s_v3'), equals(basics('vmSize'), 'Standard_L8s_v2'), equals(basics('vmSize'), 'Standard_L16s_v2'), equals(basics('vmSize'), 'Standard_L32s_v2'), equals(basics('vmSize'), 'Standard_L48s_v2'), equals(basics('vmSize'), 'Standard_L64s_v2'), equals(basics('vmSize'), 'Standard_L80s_v2'), equals(basics('vmSize'), 'Standard_L8as_v3'), equals(basics('vmSize'), 'Standard_L16as_v3'), equals(basics('vmSize'), 'Standard_L32as_v3'), equals(basics('vmSize'), 'Standard_L48as_v3'), equals(basics('vmSize'), 'Standard_L64as_v3'), equals(basics('vmSize'), 'Standard_L80as_v3'), equals(basics('vmSize'), 'Standard_NC4as_T4_v3'), equals(basics('vmSize'), 'Standard_NC8as_T4_v3'), equals(basics('vmSize'), 'Standard_NC16as_T4_v3'), equals(basics('vmSize'), 'Standard_NC64as_T4_v3'), equals(basics('vmSize'), 'Standard_ND6s_v2'), equals(basics('vmSize'), 'Standard_ND12s_v2'), equals(basics('vmSize'), 'Standard_ND24s_v2'), equals(basics('vmSize'), 'Standard_ND40s_v2'), equals(basics('vmSize'), 'Standard_HB120rs_v2'), equals(basics('vmSize'), 'Standard_HC44rs'))]"
          }
        ]
      },
      {
        "name": "advanced",
        "label": "Advanced",
        "bladeTitle": "Advanced",
        "elements": [
          {
            "name": "serialConsole",
            "type": "Microsoft.Common.OptionsGroup",
            "label": "Serial Console",
            "defaultValue": "No",
            "toolTip": "Activate the serial console.",
            "constraints": {
              "allowedValues": [
                {
                  "label": "No",
                  "value": "No"
                },
                {
                  "label": "Yes",
                  "value": "Yes"
                }
              ],
              "required": true
            },
            "visible": true
          },
          {
            "name": "storageAccount",
            "type": "Microsoft.Storage.StorageAccountSelector",
            "label": "Storage account",
            "toolTip": "Choose storage account for Serial console. Must be Standard_GRS type.",
            "defaultValue": {
              "type": "Standard_GRS"
            },
            "constraints": {
              "allowedTypes": [
                "Standard_GRS",
                "Standard_LRS",
                "Standard_RAGRS"
              ]
            },
            "options": {
              "hideExisting": false
            },
            "visible": "[equals(steps('advanced').serialConsole, 'Yes')]"
          }
        ]
      },
      {
        "name": "tags",
        "label": "Tags",
        "bladeTitle": "Bloxone Tags",
        "subLabel": {
          "preValidation": "Configure tags",
          "postValidation": "Done"
        },
        "elements": [
          {
            "name": "tagsByResource",
            "type": "Microsoft.Common.TagsByResource",
            "tooltip": "Manage tags for resources.",
            "resources": [
              "Microsoft.Network/networkInterfaces",
              "Microsoft.Network/publicIPAddresses",
              "Microsoft.Storage/storageAccounts",
              "Microsoft.Network/networkSecurityGroups",
              "Microsoft.Compute/virtualMachines",
              "Microsoft.Network/virtualNetworks"
            ]
          }
        ]
      }
    ],
    "outputs": {
      "jointoken": "[basics('jointoken')]",
      "httpProxy": "[basics('httpProxy')]",
      "location": "[location()]",
      "publicIPAddressName": "[steps('networking').publicIp.name]",
      "publicIpExistingRgName": "[steps('networking').publicIp.resourceGroup]",
      "publicIpNewOrExistingOrNone": "[steps('networking').publicIp.newOrExistingOrNone]",
      "securityGroup": "[if(startsWith(string(steps('networking').securityGroup), '['), steps('networking').securityGroup, parse(concat('[\"',steps('networking').securityGroup,'\"]')))]",
      "storageAccountName": "[steps('advanced').storageAccount.name]",
      "storageAccountType": "[steps('advanced').storageAccount.type]",
      "storageAccountNewOrExistingOrNone": "[if(empty(steps('advanced').storageAccount.newOrExisting), 'none', steps('advanced').storageAccount.newOrExisting)]",
      "storageAccountExistingRG": "[steps('advanced').storageAccount.resourceGroup]",
      "subnet1Name": "[steps('networking').virtualNetwork.subnets.subnet1.name]",
      "subnet1Prefix": "[steps('networking').virtualNetwork.subnets.subnet1.addressPrefix]",
      "virtualNetworkAddressPrefix": "[steps('networking').virtualNetwork.addressPrefix]",
      "virtualNetworkExistingRGName": "[steps('networking').virtualNetwork.resourceGroup]",
      "virtualNetworkName": "[steps('networking').virtualNetwork.name]",
      "vmName": "[basics('vmName')]",
      "vmSize": "[basics('vmSize')]",
      "vnetNewOrExisting": "[steps('networking').virtualNetwork.newOrExisting]",
      "tagsByResource": "[steps('tags').tagsByResource]",
      "osDiskSize": "[int(steps('disks').osDiskSize)]",
      "osDiskType": "[steps('disks').osDiskType]",
      "availabilityZones": "[basics('availabilityZones')]",
      "availabilityOptions": "[basics('availabilityOptions')]",
      "zoneOptions": "[basics('zoneOptions')]",
      "enableIPForwarding": "[steps('networking').enableIPForwarding]",
      "enableAcceleratedNetworking": "[steps('networking').enableAcceleratedNetworking]"
    }
  }
}
