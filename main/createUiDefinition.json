{
  "$schema": "https://schema.management.azure.com/schemas/0.1.2-preview/CreateUIDefinition.MultiVm.json#",
  "handler": "Microsoft.Azure.CreateUIDef",
  "version": "0.1.2-preview",
  "parameters": {
    "config": {
      "isWizard": false,
      "basics": {
        "resourceGroup": {
          "constraints": {
            "validations": [
              {
                "isValid": "[not(contains(resourceGroup().name, 'test'))]",
                "message": "Resource Group name can not contain test"
              }
            ]
          },
          "allowExisting": true
        }
      }
    },
    "basics": [
	    {
          "name": "availabilityOptions",
          "type": "Microsoft.Common.DropDown",
          "label": "Availability options",
          "toolTip": "Select the availability option.",
          "constraints": {
            "allowedValues": [
			        { "label": "No infrastructure redundancy required", "value": "no infrastructure"},
              { "label": "Availability zone", "value": "availabilityZone" }
            ]
          },
		    "visible": "[or(equals(location(), 'eastus'), equals(location(), 'australiaeast'), equals(location(), 'brazilsouth'), equals(location(), 'canadacentral'), equals(location(), 'centralindia'), equals(location(), 'centralus'), equals(location(), 'eastasia'), equals(location(), 'eastus2'), equals(location(), 'francecentral'), equals(location(), 'germanywestcentral'), equals(location(), 'israelcentral'), equals(location(), 'italynorth'), equals(location(), 'japaneast'), equals(location(), 'japanwest'), equals(location(), 'koreacentral'), equals(location(), 'mexicocentral'), equals(location(), 'newzealandnorth'), equals(location(), 'northeurope'), equals(location(), 'norwayeast'), equals(location(), 'polandcentral'), equals(location(), 'qatarcentral'), equals(location(), 'southafricanorth'), equals(location(), 'southcentralus'), equals(location(), 'southeastasia'), equals(location(), 'spaincentral'), equals(location(), 'swedencentral'), equals(location(), 'switzerlandnorth'), equals(location(), 'uaenorth'), equals(location(), 'uksouth'), equals(location(), 'westeurope'), equals(location(), 'westus2'), equals(location(), 'westus3'))]"
      },
      {
          "name": "zoneOptions",
          "type": "Microsoft.Common.OptionsGroup",
          "label": "Zone options",
          "toolTip": "Select the zone option.",
          "constraints": {
            "allowedValues": [
              { "label": "Self-selected zone", "value": "selfSelected" },
              { "label": "Azure-selected zone (Preview)", "value": "azureSelected" }
            ]
          },
		      "visible": "[equals(basics('availabilityOptions'), 'availabilityZone')]"
      },
      {
          "name": "availabilityZone",
          "type": "Microsoft.Common.DropDown",
          "label": "Availability zone",
		      "defaultValue": "Zone 1",
		      "toolTip": "Multiple zones can be selected",
          "constraints": {
            "allowedValues": [
              { "label": "Zone 1", "value": "1" },
              { "label": "Zone 2", "value": "2" },
              { "label": "Zone 3", "value": "3" }
            ]
          },
          "visible": "[equals(basics('zoneOptions'), 'selfSelected')]"
      },
      {
        "name": "vmName",
        "type": "Microsoft.Common.TextBox",
        "label": "Bloxone VM name",
        "defaultValue": "Bloxone",
        "toolTip": "The name of the new Bloxone vm.",
        "multiLine": false,
        "constraints": {
          "required": true,
          "regex": "^(([0-9a-zA-Z][0-9a-zA-Z-.]{0,63}[0-9a-zA-Z])|[0-9a-zA-Z]).{1,64}$",
          "validationMessage": "The length must be between 1 and 64 characters. The first and the last characters must be letters or numbers. The remaining characters must be letters, numbers, periods or dashes."
        },
        "visible": true
      },
      {
        "name": "vmSize",
        "type": "Microsoft.Compute.SizeSelector",
        "label": "VM size",
        "toolTip": "Select the size of VM.",
        "recommendedSizes": [
          "Standard_F8s"
        ],
        "constraints": {
          "allowedSizes": [
            "Standard_B2s",
            "Standard_B2ms",
            "Standard_B4ms",
            "Standard_B8ms",
            "Standard_B12ms",
            "Standard_B16ms",
            "Standard_B20ms",
            "Standard_F4s",
            "Standard_F8s"
          ]
        },
        "visible": "true",
        "osPlatform": "Linux"
      },
      {
        "name": "injecting",
        "type": "Microsoft.Common.OptionsGroup",
        "label": "Injecting",
        "defaultValue": "Jointoken",
        "toolTip": "Choose the type of injection.",
        "constraints": {
          "allowedValues": [
            {
              "label": "Jointoken",
              "value": "Jointoken"
            },
            {
              "label": "Custom Data",
              "value": "Custom Data"
            }
          ],
          "required": true
        },
        "visible": true
      },
      {
        "name": "jointoken",
        "type": "Microsoft.Common.TextBox",
        "label": "Jointoken",
        "toolTip": "Pass Jointoken.",
        "constraints": {
          "required": true,
          "regex": "^[a-zA-Z0-9_-]{44,44}$",
          "validationMessage": "Insert validate Jointoken."
        },
        "visible": "[equals(basics('injecting'), 'Jointoken')]"
      },
      {
        "name": "customData",
        "type": "Microsoft.Common.TextBox",
        "label": "Custom data",
        "toolTip": "Pass Custom Data for cloudinit.",
        "multiLine": true,
        "constraints": {
          "required": false,
          "regex": "(?=.*).{0,100000}",
          "validationMessage": "The Custom data cannot be more than 100000 characters."
        },
        "visible": "[equals(basics('injecting'), 'Custom Data')]"
      }
    ],
    "steps": [
      {
        "name": "vmSettings",
        "label": "VM Settings",
        "bladeTitle": "Bloxone VM settings",
        "subLabel": {
          "preValidation": "Configure VM Settings",
          "postValidation": "Done"
        },
        "elements": [
	  {
            "name": "vmOSDiskSize",
            "type": "Microsoft.Common.TextBox",
            "label": "OS Disk Size for VM",
            "toolTip": "Specify the size of the Disk. The Disk size should be between 60GB and 2500GB",
            "constraints": {
              "regex": "^(6[0-9]|7[0-9]|8[0-9]|9[0-9]|1[0-9]{2}|1[1-9][0-9]{2}|2[0-4][0-9]{2}|2500)$",
              "validationMessage": "The size must be in numbers and minimum allowed size is 60GB and maximum is 2500GB"

            }
          },
          {
            "name": "network",
            "type": "Microsoft.Network.VirtualNetworkCombo",
            "label": {
              "virtualNetwork": "Virtual network",
              "subnets": "Subnets"
            },
            "toolTip": {
              "virtualNetwork": "Only virtual networks in the currently selected subscription and location are listed. If you choose to create a new virtual network, it will be created in the same subscription, location, and resource group as the storage account."
            },
            "defaultValue": {
              "addressPrefixSize": "/16"
            },
            "constraints": {
              "minAddressPrefixSize": "/29"
            },
            "options": {
              "hideExisting": false
            },
            "subnets": {
              "subnet1": {
                "label": "Subnet",
                "defaultValue": {
                  "name": "subnet1",
                  "addressPrefixSize": "/24"
                },
                "constraints": {
                  "minAddressPrefixSize": "/30"
                }
              }
            },
            "visible": true
          },
          {
            "name": "publicIp",
            "type": "Microsoft.Network.PublicIpAddressCombo",
            "label": {
              "publicIpAddress": "Public IP address"
            },
            "toolTip": {
              "publicIpAddress": "Use a public IP address if you want to communicate with the virtual machine from outside the virtual network."
            },
            "options": {
              "hideNone": false,
              "hideDomainNameLabel": true,
              "hideExisting": false,
              "zone": 3
            },
            "visible": true
          },
          {
            "name": "securityGroup",
            "type": "Microsoft.Common.DropDown",
            "label": "Security group",
            "toolTip": "Select inbound ports.",
            "multiselect": true,
            "selectAll": true,
            "constraints": {
              "allowedValues": [
                {
                  "label": "Bootstrap UI (443)",
                  "value": "bootstrapUi"
                },
                {
                  "label": "SSH (22)",
                  "value": "ssh"
                }
              ]
            },
            "visible": true
          },
          {
            "name": "serialConsole",
            "type": "Microsoft.Common.OptionsGroup",
            "label": "Serial Console",
            "defaultValue": "No",
            "toolTip": "Activate the serial console.",
            "constraints": {
              "allowedValues": [
                {
                  "label": "No",
                  "value": "No"
                },
                {
                  "label": "Yes",
                  "value": "Yes"
                }
              ],
              "required": true
            },
            "visible": true
          },
          {
            "name": "storageAccount",
            "type": "Microsoft.Storage.StorageAccountSelector",
            "label": "Storage account",
            "toolTip": "Choose storage account for Serial console. Must be Standard_GRS type.",
            "defaultValue": {
              "type": "Standard_GRS"
            },
            "constraints": {
              "allowedTypes": ["Standard_GRS"]
            },
            "options": {
              "hideExisting": false
            },
            "visible": "[equals(steps('vmSettings').serialConsole, 'Yes')]"
          }
        ]
      }
    ],
    "outputs": {
      "customData": "[basics('customData')]",
      "jointoken": "[basics('jointoken')]",
      "location": "[location()]",
      "publicIPAddressName": "[steps('vmSettings').publicIp.name]",
      "publicIpExistingRgName": "[steps('vmSettings').publicIp.resourceGroup]",
      "publicIpNewOrExistingOrNone": "[steps('vmSettings').publicIp.newOrExistingOrNone]",
      "securityGroupSsh": "[if(contains(steps('vmSettings').securityGroup, 'ssh'), 'true', 'false')]",
      "securityGroupBootstrapUi": "[if(contains(steps('vmSettings').securityGroup, 'bootstrapUi'), 'true', 'false')]",
      "storageAccountName": "[steps('vmSettings').storageAccount.name]",
      "storageAccountType": "[steps('vmSettings').storageAccount.type]",
      "storageAccountNewOrExistingOrNone": "[if(empty(steps('vmSettings').storageAccount.newOrExisting), 'none', steps('vmSettings').storageAccount.newOrExisting)]",
      "storageAccountExistingRG": "[steps('vmSettings').storageAccount.resourceGroup]",
      "subnet1Name": "[steps('vmSettings').network.subnets.subnet1.name]",
      "subnet1Prefix": "[steps('vmSettings').network.subnets.subnet1.addressPrefix]",
      "virtualNetworkAddressPrefix": "[steps('vmSettings').network.addressPrefix]",
      "virtualNetworkExistingRGName": "[steps('vmSettings').network.resourceGroup]",
      "virtualNetworkName": "[steps('vmSettings').network.name]",
      "vmName": "[basics('vmName')]",
      "vmSize": "[basics('vmSize')]",
      "vnetNewOrExisting": "[steps('vmSettings').network.newOrExisting]"
    }
  }
}
